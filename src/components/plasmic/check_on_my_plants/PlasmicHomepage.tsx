// @ts-nocheck
/* eslint-disable */
/* tslint:disable */
/* prettier-ignore-start */

/** @jsxRuntime classic */
/** @jsx createPlasmicElementProxy */
/** @jsxFrag React.Fragment */

// This class is auto-generated by Plasmic; please do not edit!
// Plasmic Project: g4U16ChXxiyY9kzMDaGd3y
// Component: rjC68L8_vvXD
import * as React from "react";

import * as p from "@plasmicapp/react-web";
import * as ph from "@plasmicapp/host";

import {
  hasVariant,
  classNames,
  wrapWithClassName,
  createPlasmicElementProxy,
  makeFragment,
  MultiChoiceArg,
  SingleBooleanChoiceArg,
  SingleChoiceArg,
  pick,
  omit,
  useTrigger,
  StrictProps,
  deriveRenderOpts,
  ensureGlobalVariants
} from "@plasmicapp/react-web";
import Button from "../../Button"; // plasmic-import: w8fHD7P1kWE/component
import Select from "../../Select"; // plasmic-import: OUgkoCY4UWb/component
import Select__Option from "../../Select__Option"; // plasmic-import: _W7_Pd2itY2/component
import TextInput from "../../TextInput"; // plasmic-import: fOYyky75Wg3/component
import WateredButton from "../../WateredButton"; // plasmic-import: G6yvhwbrKZO/component
import WateringHistoryRow from "../../WateringHistoryRow"; // plasmic-import: OlsJy9nRtl/component

import { useScreenVariants as useScreenVariantsaxx2E0C3R4WD } from "./PlasmicGlobalVariant__Screen"; // plasmic-import: AXX-2e0C3R4wD/globalVariant

import "@plasmicapp/react-web/lib/plasmic.css";

import projectcss from "./plasmic_check_on_my_plants.module.css"; // plasmic-import: g4U16ChXxiyY9kzMDaGd3y/projectcss
import sty from "./PlasmicHomepage.module.css"; // plasmic-import: rjC68L8_vvXD/css

import ChecksvgIcon from "./icons/PlasmicIcon__Checksvg"; // plasmic-import: CGRffNbaaHB/icon
import Icon3Icon from "./icons/PlasmicIcon__Icon3"; // plasmic-import: eUq6eI3Zsph/icon
import SearchsvgIcon from "./icons/PlasmicIcon__Searchsvg"; // plasmic-import: KrfpdSyIW3p/icon
import EllipsessvgIcon from "./icons/PlasmicIcon__Ellipsessvg"; // plasmic-import: 8pQ2njHnaW/icon
import image311As9DxzxSEb from "./images/image31.jpeg"; // plasmic-import: 1AS9DxzxS-eb/picture

export type PlasmicHomepage__VariantMembers = {};

export type PlasmicHomepage__VariantsArgs = {};
type VariantPropType = keyof PlasmicHomepage__VariantsArgs;
export const PlasmicHomepage__VariantProps = new Array<VariantPropType>();

export type PlasmicHomepage__ArgsType = {};
type ArgPropType = keyof PlasmicHomepage__ArgsType;
export const PlasmicHomepage__ArgProps = new Array<ArgPropType>();

export type PlasmicHomepage__OverridesType = {
  root?: p.Flex<"div">;
  accountButton?: p.Flex<typeof Button>;
  h1?: p.Flex<"h1">;
};

export interface DefaultHomepageProps {
  className?: string;
}

function PlasmicHomepage__RenderFunc(props: {
  variants: PlasmicHomepage__VariantsArgs;
  args: PlasmicHomepage__ArgsType;
  overrides: PlasmicHomepage__OverridesType;

  forNode?: string;
}) {
  const { variants, args, overrides, forNode } = props;

  const globalVariants = ensureGlobalVariants({
    screen: useScreenVariantsaxx2E0C3R4WD()
  });

  return (
    <React.Fragment>
      {}
      {}

      <div className={projectcss.plasmic_page_wrapper}>
        <p.Stack
          as={"div"}
          data-plasmic-name={"root"}
          data-plasmic-override={overrides.root}
          data-plasmic-root={true}
          data-plasmic-for-node={forNode}
          hasGap={true}
          className={classNames(
            projectcss.all,
            projectcss.root_reset,
            projectcss.plasmic_default_styles,
            projectcss.plasmic_tokens,
            sty.root,
            "" as const
          )}
          onClick={"" as const}
        >
          {true ? (
            <p.Stack
              as={"div"}
              hasGap={true}
              className={classNames(projectcss.all, sty.freeBox__exQe)}
            >
              {true ? (
                <p.Stack
                  as={"div"}
                  hasGap={true}
                  className={classNames(projectcss.all, sty.freeBox__uyAso)}
                >
                  <div
                    className={classNames(
                      projectcss.all,
                      projectcss.__wab_text,
                      sty.text__qvYrk
                    )}
                  >
                    {"CheckOnMyPlants"}
                  </div>

                  <p.Stack
                    as={"div"}
                    hasGap={true}
                    className={classNames(projectcss.all, sty.freeBox__osHx)}
                  >
                    <Button
                      data-plasmic-name={"accountButton"}
                      data-plasmic-override={overrides.accountButton}
                      className={classNames(
                        "__wab_instance",
                        sty.accountButton
                      )}
                      waterButton={true}
                    >
                      {"Account"}
                    </Button>
                  </p.Stack>
                </p.Stack>
              ) : null}
            </p.Stack>
          ) : null}
          {true ? (
            <div className={classNames(projectcss.all, sty.columns__vhGnd)}>
              <div className={classNames(projectcss.all, sty.column___28Y0I)}>
                <Select
                  className={classNames("__wab_instance", sty.select__rn0UW)}
                  placeholder={
                    <div
                      className={classNames(
                        projectcss.all,
                        projectcss.__wab_text,
                        sty.text__jBpiL
                      )}
                    >
                      {"Homes"}
                    </div>
                  }
                />
              </div>

              <div className={classNames(projectcss.all, sty.column___6Hvfj)}>
                <Button
                  className={classNames("__wab_instance", sty.button__ypP9X)}
                >
                  <div
                    className={classNames(
                      projectcss.all,
                      projectcss.__wab_text,
                      sty.text__vvehd
                    )}
                  >
                    {"Add Plant"}
                  </div>
                </Button>
              </div>

              {true ? (
                <div className={classNames(projectcss.all, sty.column__yZvrI)}>
                  <Select
                    className={classNames("__wab_instance", sty.select__roUlf)}
                    placeholder={"Order by"}
                  />
                </div>
              ) : null}

              <div className={classNames(projectcss.all, sty.column__uxuGs)}>
                {true ? (
                  <Button
                    className={classNames("__wab_instance", sty.button__sxGxh)}
                  >
                    {"Filter"}
                  </Button>
                ) : null}
              </div>
            </div>
          ) : null}

          <div className={classNames(projectcss.all, sty.columns___6OAd1)}>
            <div className={classNames(projectcss.all, sty.column___9D9I0)}>
              <TextInput
                className={classNames("__wab_instance", sty.textInput___0R3Z7)}
                showStartIcon={true}
              />
            </div>

            <div className={classNames(projectcss.all, sty.column__lJd9W)}>
              <TextInput
                className={classNames("__wab_instance", sty.textInput__yjMyj)}
                placeholder={"Frequency" as const}
                showStartIcon={true}
              />
            </div>

            <div className={classNames(projectcss.all, sty.column__hqwmm)}>
              <TextInput
                className={classNames("__wab_instance", sty.textInput__tx4X)}
                placeholder={"Left" as const}
                showStartIcon={true}
              />
            </div>

            <div className={classNames(projectcss.all, sty.column__asqZf)} />

            <div className={classNames(projectcss.all, sty.column___8ZHi)} />

            <div className={classNames(projectcss.all, sty.column__g0OXe)}>
              <Button
                className={classNames("__wab_instance", sty.button__iwuxO)}
              >
                {"Apply Filter"}
              </Button>
            </div>
          </div>

          <div className={classNames(projectcss.all, sty.freeBox__l8Ik)}>
            {true ? (
              <p.Stack
                as={"div"}
                hasGap={true}
                className={classNames(projectcss.all, sty.columns__dckob)}
              >
                <div className={classNames(projectcss.all, sty.column__qaVw)}>
                  <p.PlasmicImg
                    alt={""}
                    className={classNames(sty.img__jxJrV)}
                    displayHeight={
                      hasVariant(globalVariants, "screen", "mobileOnly")
                        ? ("100%" as const)
                        : ("100%" as const)
                    }
                    displayMaxHeight={"none" as const}
                    displayMaxWidth={"100%" as const}
                    displayMinHeight={"0" as const}
                    displayMinWidth={"0" as const}
                    displayWidth={"100%" as const}
                    loading={"lazy" as const}
                    src={{
                      src: image311As9DxzxSEb,
                      fullWidth: 1280,
                      fullHeight: 853,
                      aspectRatio: undefined
                    }}
                  />
                </div>

                <div className={classNames(projectcss.all, sty.column__nwJdi)}>
                  <div
                    className={classNames(projectcss.all, sty.columns__qlXyf)}
                  >
                    <div
                      className={classNames(projectcss.all, sty.column__fUPb)}
                    >
                      <div
                        className={classNames(
                          projectcss.all,
                          projectcss.__wab_text,
                          sty.text__mq2YA
                        )}
                      >
                        {"Plant #1"}
                      </div>
                    </div>

                    {(
                      hasVariant(globalVariants, "screen", "mobileOnly")
                        ? true
                        : true
                    ) ? (
                      <div
                        className={classNames(
                          projectcss.all,
                          sty.column__nlcVt
                        )}
                      >
                        {(
                          hasVariant(globalVariants, "screen", "mobileOnly")
                            ? true
                            : true
                        ) ? (
                          <div
                            className={classNames(
                              projectcss.all,
                              projectcss.__wab_text,
                              sty.text__jmbvb
                            )}
                          >
                            {"Every 22 days"}
                          </div>
                        ) : null}
                        {(
                          hasVariant(globalVariants, "screen", "mobileOnly")
                            ? true
                            : true
                        ) ? (
                          <div
                            className={classNames(
                              projectcss.all,
                              projectcss.__wab_text,
                              sty.text__piEnZ
                            )}
                          >
                            {"4 days left"}
                          </div>
                        ) : null}
                      </div>
                    ) : null}
                  </div>
                </div>

                <div className={classNames(projectcss.all, sty.column__p5P5F)}>
                  <WateredButton
                    className={classNames(
                      "__wab_instance",
                      sty.wateredButton__nTtW
                    )}
                  />
                </div>

                <div className={classNames(projectcss.all, sty.column__w1HW)}>
                  <EllipsessvgIcon
                    className={classNames(projectcss.all, sty.svg___9HtZo)}
                    role={"img"}
                  />
                </div>
              </p.Stack>
            ) : null}
            {true ? (
              <p.Stack
                as={"div"}
                hasGap={true}
                className={classNames(projectcss.all, sty.columns__yJQpE)}
              >
                <div className={classNames(projectcss.all, sty.column___0E8Le)}>
                  <p.PlasmicImg
                    alt={""}
                    className={classNames(sty.img__oOEyW)}
                    displayHeight={
                      hasVariant(globalVariants, "screen", "mobileOnly")
                        ? ("100%" as const)
                        : ("100%" as const)
                    }
                    displayMaxHeight={"none" as const}
                    displayMaxWidth={"100%" as const}
                    displayMinHeight={"0" as const}
                    displayMinWidth={"0" as const}
                    displayWidth={"100%" as const}
                    loading={"lazy" as const}
                    src={{
                      src: image311As9DxzxSEb,
                      fullWidth: 1280,
                      fullHeight: 853,
                      aspectRatio: undefined
                    }}
                  />
                </div>

                <div className={classNames(projectcss.all, sty.column__zddaP)}>
                  <div
                    className={classNames(projectcss.all, sty.columns___3Gmo8)}
                  >
                    <div
                      className={classNames(projectcss.all, sty.column__quwQv)}
                    >
                      <div
                        className={classNames(
                          projectcss.all,
                          projectcss.__wab_text,
                          sty.text__ly00O
                        )}
                      >
                        {"Plant #1"}
                      </div>
                    </div>

                    {(
                      hasVariant(globalVariants, "screen", "mobileOnly")
                        ? true
                        : true
                    ) ? (
                      <div
                        className={classNames(
                          projectcss.all,
                          sty.column__xAaIs
                        )}
                      >
                        {(
                          hasVariant(globalVariants, "screen", "mobileOnly")
                            ? true
                            : true
                        ) ? (
                          <div
                            className={classNames(
                              projectcss.all,
                              projectcss.__wab_text,
                              sty.text__xDulx
                            )}
                          >
                            {"Every 22 days"}
                          </div>
                        ) : null}
                        {(
                          hasVariant(globalVariants, "screen", "mobileOnly")
                            ? true
                            : true
                        ) ? (
                          <div
                            className={classNames(
                              projectcss.all,
                              projectcss.__wab_text,
                              sty.text__c8UtX
                            )}
                          >
                            {"4 days left"}
                          </div>
                        ) : null}
                      </div>
                    ) : null}
                  </div>
                </div>

                <div className={classNames(projectcss.all, sty.column__kbbt6)}>
                  <WateredButton
                    className={classNames(
                      "__wab_instance",
                      sty.wateredButton___4T7J8
                    )}
                  />
                </div>

                <div className={classNames(projectcss.all, sty.column__x9Y3C)}>
                  <EllipsessvgIcon
                    className={classNames(projectcss.all, sty.svg__oMiXy)}
                    role={"img"}
                  />
                </div>
              </p.Stack>
            ) : null}

            <div className={classNames(projectcss.all, sty.freeBox__f3Koa)}>
              {true ? (
                <p.Stack
                  as={"div"}
                  hasGap={true}
                  className={classNames(projectcss.all, sty.columns__zZvUe)}
                >
                  <div
                    className={classNames(projectcss.all, sty.column__q8HQx)}
                  >
                    <p.PlasmicImg
                      alt={""}
                      className={classNames(sty.img___1G0Kl)}
                      displayHeight={
                        hasVariant(globalVariants, "screen", "mobileOnly")
                          ? ("100%" as const)
                          : ("100%" as const)
                      }
                      displayMaxHeight={"none" as const}
                      displayMaxWidth={"100%" as const}
                      displayMinHeight={"0" as const}
                      displayMinWidth={"0" as const}
                      displayWidth={"100%" as const}
                      loading={"lazy" as const}
                      src={{
                        src: image311As9DxzxSEb,
                        fullWidth: 1280,
                        fullHeight: 853,
                        aspectRatio: undefined
                      }}
                    />
                  </div>

                  <div
                    className={classNames(projectcss.all, sty.column__fwXy8)}
                  >
                    <div
                      className={classNames(projectcss.all, sty.columns__jrEuV)}
                    >
                      <div
                        className={classNames(projectcss.all, sty.column__wYcn)}
                      >
                        <div
                          className={classNames(
                            projectcss.all,
                            projectcss.__wab_text,
                            sty.text__vFp9O
                          )}
                        >
                          {"Plant #1"}
                        </div>

                        <div
                          className={classNames(
                            projectcss.all,
                            projectcss.__wab_text,
                            sty.text___6PsP0
                          )}
                        >
                          {"Kitchen Window"}
                        </div>
                      </div>

                      {(
                        hasVariant(globalVariants, "screen", "mobileOnly")
                          ? true
                          : true
                      ) ? (
                        <div
                          className={classNames(
                            projectcss.all,
                            sty.column__fssmh
                          )}
                        >
                          {(
                            hasVariant(globalVariants, "screen", "mobileOnly")
                              ? true
                              : true
                          ) ? (
                            <div
                              className={classNames(
                                projectcss.all,
                                projectcss.__wab_text,
                                sty.text___0XgJh
                              )}
                            >
                              {"Every 22 days"}
                            </div>
                          ) : null}
                          {(
                            hasVariant(globalVariants, "screen", "mobileOnly")
                              ? true
                              : true
                          ) ? (
                            <div
                              className={classNames(
                                projectcss.all,
                                projectcss.__wab_text,
                                sty.text__f2T4K
                              )}
                            >
                              {"4 days left"}
                            </div>
                          ) : null}
                        </div>
                      ) : null}
                    </div>
                  </div>

                  <div
                    className={classNames(projectcss.all, sty.column__jtbHs)}
                  >
                    <WateredButton
                      className={classNames(
                        "__wab_instance",
                        sty.wateredButton__j1LZw
                      )}
                    />
                  </div>

                  <div
                    className={classNames(projectcss.all, sty.column__fuQOb)}
                  >
                    <EllipsessvgIcon
                      className={classNames(projectcss.all, sty.svg___2Ns0Q)}
                      role={"img"}
                    />
                  </div>
                </p.Stack>
              ) : null}

              <div className={classNames(projectcss.all, sty.freeBox__xZ1T5)}>
                <div
                  className={classNames(
                    projectcss.all,
                    projectcss.__wab_text,
                    sty.text__wcYnq
                  )}
                >
                  {"Plant Info"}
                </div>

                <div className={classNames(projectcss.all, sty.columns__p5Lkc)}>
                  <div
                    className={classNames(projectcss.all, sty.column__aelNn)}
                  >
                    {(
                      hasVariant(globalVariants, "screen", "mobileOnly")
                        ? true
                        : true
                    ) ? (
                      <div
                        className={classNames(
                          projectcss.all,
                          projectcss.__wab_text,
                          sty.text__e4LSb
                        )}
                      >
                        {"Name"}
                      </div>
                    ) : null}

                    <TextInput
                      className={classNames(
                        "__wab_instance",
                        sty.textInput__tl6KL
                      )}
                    />
                  </div>

                  <div
                    className={classNames(projectcss.all, sty.column__li8Xu)}
                  >
                    <div
                      className={classNames(
                        projectcss.all,
                        projectcss.__wab_text,
                        sty.text__ug8Vi
                      )}
                    >
                      {"Frequency"}
                    </div>

                    <TextInput
                      className={classNames(
                        "__wab_instance",
                        sty.textInput__qRne3
                      )}
                    />
                  </div>

                  <div
                    className={classNames(projectcss.all, sty.column__ouaHd)}
                  >
                    {true ? (
                      <div
                        className={classNames(
                          projectcss.all,
                          projectcss.__wab_text,
                          sty.text__xb43Z
                        )}
                      >
                        {"Home"}
                      </div>
                    ) : null}

                    <Select
                      className={classNames(
                        "__wab_instance",
                        sty.select___2Ler4
                      )}
                      placeholder={
                        <div
                          className={classNames(
                            projectcss.all,
                            projectcss.__wab_text,
                            sty.text__lRbzo
                          )}
                        >
                          {"Select…"}
                        </div>
                      }
                    />
                  </div>

                  <div
                    className={classNames(projectcss.all, sty.column___6CqhN)}
                  >
                    {(
                      hasVariant(globalVariants, "screen", "mobileOnly")
                        ? true
                        : true
                    ) ? (
                      <div
                        className={classNames(
                          projectcss.all,
                          projectcss.__wab_text,
                          sty.text__jyFrc
                        )}
                      >
                        {"Picture"}
                      </div>
                    ) : null}

                    <Button
                      className={classNames(
                        "__wab_instance",
                        sty.button__gb0P4
                      )}
                    >
                      {"Picture..."}
                    </Button>
                  </div>

                  <div
                    className={classNames(projectcss.all, sty.column__t5Afj)}
                  >
                    {(
                      hasVariant(globalVariants, "screen", "mobileOnly")
                        ? true
                        : true
                    ) ? (
                      <div
                        className={classNames(
                          projectcss.all,
                          projectcss.__wab_text,
                          sty.text__zlzSv
                        )}
                      >
                        {"Location"}
                      </div>
                    ) : null}

                    <TextInput
                      className={classNames(
                        "__wab_instance",
                        sty.textInput__v4CCb
                      )}
                    />
                  </div>

                  <div
                    className={classNames(projectcss.all, sty.column__kZzlQ)}
                  >
                    <Button
                      className={classNames(
                        "__wab_instance",
                        sty.button___5VW7G
                      )}
                    >
                      {"Update"}
                    </Button>
                  </div>
                </div>

                <div
                  className={classNames(projectcss.all, sty.freeBox__wjxnN)}
                />

                <div
                  className={classNames(projectcss.all, sty.columns___7KkRj)}
                >
                  <div
                    className={classNames(projectcss.all, sty.column__owNFt)}
                  >
                    <Select
                      className={classNames(
                        "__wab_instance",
                        sty.select__cmFmW
                      )}
                      placeholder={
                        <div
                          className={classNames(
                            projectcss.all,
                            projectcss.__wab_text,
                            sty.text__x2412
                          )}
                        >
                          {"Show 5"}
                        </div>
                      }
                    />
                  </div>

                  <div className={classNames(projectcss.all, sty.column__wmHq)}>
                    <div
                      className={classNames(
                        projectcss.all,
                        projectcss.__wab_text,
                        sty.text___5WKdK
                      )}
                    >
                      {"History"}
                    </div>
                  </div>

                  <div
                    className={classNames(projectcss.all, sty.column__iLpwt)}
                  >
                    <Button
                      className={classNames(
                        "__wab_instance",
                        sty.button__hWCt8
                      )}
                    >
                      {"Add"}
                    </Button>
                  </div>
                </div>

                <div className={classNames(projectcss.all, sty.freeBox__wWc5W)}>
                  <WateringHistoryRow
                    className={classNames(
                      "__wab_instance",
                      sty.wateringHistoryRow__cesT8
                    )}
                  />

                  <WateringHistoryRow
                    className={classNames(
                      "__wab_instance",
                      sty.wateringHistoryRow__uY2WV
                    )}
                    onTime={"2d late"}
                  />

                  <WateringHistoryRow
                    className={classNames(
                      "__wab_instance",
                      sty.wateringHistoryRow__lGo2L
                    )}
                    onTime={"1d early"}
                  />
                </div>

                <div className={classNames(projectcss.all, sty.columns__bkBBw)}>
                  <div
                    className={classNames(projectcss.all, sty.column__xawcp)}
                  >
                    <Button
                      className={classNames(
                        "__wab_instance",
                        sty.button__qRyXs
                      )}
                    >
                      {"Prev"}
                    </Button>
                  </div>

                  <div
                    className={classNames(projectcss.all, sty.column__dgwcb)}
                  >
                    <div
                      className={classNames(
                        projectcss.all,
                        projectcss.__wab_text,
                        sty.text__rmtw8
                      )}
                    >
                      {"1 of 5"}
                    </div>
                  </div>

                  <div
                    className={classNames(projectcss.all, sty.column___6PuX6)}
                  >
                    <Button
                      className={classNames(
                        "__wab_instance",
                        sty.button___4I2J0
                      )}
                    >
                      {"Next"}
                    </Button>
                  </div>
                </div>
              </div>
            </div>
          </div>

          {true ? (
            <h1
              data-plasmic-name={"h1"}
              data-plasmic-override={overrides.h1}
              className={classNames(
                projectcss.all,
                projectcss.h1,
                projectcss.__wab_text,
                sty.h1
              )}
            >
              {"Welcome to your first page."}
            </h1>
          ) : null}
          {true ? (
            <div
              className={classNames(
                projectcss.all,
                projectcss.__wab_text,
                sty.text__tpLc2
              )}
            >
              <React.Fragment>
                <React.Fragment>
                  {
                    "If you haven't already done so, go back and learn the basics by going through the Plasmic Levels tutorial.\n\nIt's always easier to start from examples! Add a new page using a template—do this from the list of pages in the top left (the gray + button).\n\nOr press the big blue + button to start dragging items into this page.\n\nIntegrate this project into your codebase—press the "
                  }
                </React.Fragment>
                <span
                  className={"plasmic_default__all plasmic_default__span"}
                  style={{ fontWeight: 700 }}
                >
                  {"Code"}
                </span>
                <React.Fragment>
                  {
                    " button in the top right and follow the quickstart instructions.\n\nJoin our Slack community (icon in bottom left) for help any time."
                  }
                </React.Fragment>
              </React.Fragment>
            </div>
          ) : null}
          {true ? (
            <div
              className={classNames(
                projectcss.all,
                projectcss.__wab_text,
                sty.text__nqEi
              )}
            >
              <React.Fragment>
                <React.Fragment>
                  {
                    "If you haven't already done so, go back and learn the basics by going through the Plasmic Levels tutorial.\n\nIt's always easier to start from examples! Add a new page using a template—do this from the list of pages in the top left (the gray + button).\n\nOr press the big blue + button to start dragging items into this page.\n\nIntegrate this project into your codebase—press the "
                  }
                </React.Fragment>
                <span
                  className={"plasmic_default__all plasmic_default__span"}
                  style={{ fontWeight: 700 }}
                >
                  {"Code"}
                </span>
                <React.Fragment>
                  {
                    " button in the top right and follow the quickstart instructions.\n\nJoin our Slack community (icon in bottom left) for help any time."
                  }
                </React.Fragment>
              </React.Fragment>
            </div>
          ) : null}
        </p.Stack>
      </div>
    </React.Fragment>
  ) as React.ReactElement | null;
}

const PlasmicDescendants = {
  root: ["root", "accountButton", "h1"],
  accountButton: ["accountButton"],
  h1: ["h1"]
} as const;
type NodeNameType = keyof typeof PlasmicDescendants;
type DescendantsType<T extends NodeNameType> =
  typeof PlasmicDescendants[T][number];
type NodeDefaultElementType = {
  root: "div";
  accountButton: typeof Button;
  h1: "h1";
};

type ReservedPropsType = "variants" | "args" | "overrides";
type NodeOverridesType<T extends NodeNameType> = Pick<
  PlasmicHomepage__OverridesType,
  DescendantsType<T>
>;
type NodeComponentProps<T extends NodeNameType> =
  // Explicitly specify variants, args, and overrides as objects
  {
    variants?: PlasmicHomepage__VariantsArgs;
    args?: PlasmicHomepage__ArgsType;
    overrides?: NodeOverridesType<T>;
  } & Omit<PlasmicHomepage__VariantsArgs, ReservedPropsType> & // Specify variants directly as props
    // Specify args directly as props
    Omit<PlasmicHomepage__ArgsType, ReservedPropsType> &
    // Specify overrides for each element directly as props
    Omit<
      NodeOverridesType<T>,
      ReservedPropsType | VariantPropType | ArgPropType
    > &
    // Specify props for the root element
    Omit<
      Partial<React.ComponentProps<NodeDefaultElementType[T]>>,
      ReservedPropsType | VariantPropType | ArgPropType | DescendantsType<T>
    >;

function makeNodeComponent<NodeName extends NodeNameType>(nodeName: NodeName) {
  type PropsType = NodeComponentProps<NodeName> & { key?: React.Key };
  const func = function <T extends PropsType>(
    props: T & StrictProps<T, PropsType>
  ) {
    const { variants, args, overrides } = deriveRenderOpts(props, {
      name: nodeName,
      descendantNames: [...PlasmicDescendants[nodeName]],
      internalArgPropNames: PlasmicHomepage__ArgProps,
      internalVariantPropNames: PlasmicHomepage__VariantProps
    });

    return PlasmicHomepage__RenderFunc({
      variants,
      args,
      overrides,
      forNode: nodeName
    });
  };
  if (nodeName === "root") {
    func.displayName = "PlasmicHomepage";
  } else {
    func.displayName = `PlasmicHomepage.${nodeName}`;
  }
  return func;
}

export const PlasmicHomepage = Object.assign(
  // Top-level PlasmicHomepage renders the root element
  makeNodeComponent("root"),
  {
    // Helper components rendering sub-elements
    accountButton: makeNodeComponent("accountButton"),
    h1: makeNodeComponent("h1"),

    // Metadata about props expected for PlasmicHomepage
    internalVariantProps: PlasmicHomepage__VariantProps,
    internalArgProps: PlasmicHomepage__ArgProps
  }
);

export default PlasmicHomepage;
/* prettier-ignore-end */
