// @ts-nocheck
/* eslint-disable */
/* tslint:disable */
/* prettier-ignore-start */

/** @jsxRuntime classic */
/** @jsx createPlasmicElementProxy */
/** @jsxFrag React.Fragment */

// This class is auto-generated by Plasmic; please do not edit!
// Plasmic Project: g4U16ChXxiyY9kzMDaGd3y
// Component: rjC68L8_vvXD
import * as React from "react";

import * as p from "@plasmicapp/react-web";
import * as ph from "@plasmicapp/host";

import {
  hasVariant,
  classNames,
  wrapWithClassName,
  createPlasmicElementProxy,
  makeFragment,
  MultiChoiceArg,
  SingleBooleanChoiceArg,
  SingleChoiceArg,
  pick,
  omit,
  useTrigger,
  StrictProps,
  deriveRenderOpts,
  ensureGlobalVariants
} from "@plasmicapp/react-web";
import Select from "../../Select"; // plasmic-import: y4GUXOimSgD/component
import Select__Option from "../../Select__Option"; // plasmic-import: ur6XKUNLcUO/component
import Button from "../../Button"; // plasmic-import: w8fHD7P1kWE/component
import WateredButton from "../../WateredButton"; // plasmic-import: G6yvhwbrKZO/component

import { useScreenVariants as useScreenVariantsaxx2E0C3R4WD } from "./PlasmicGlobalVariant__Screen"; // plasmic-import: AXX-2e0C3R4wD/globalVariant

import "@plasmicapp/react-web/lib/plasmic.css";

import projectcss from "./plasmic_check_on_my_plants.module.css"; // plasmic-import: g4U16ChXxiyY9kzMDaGd3y/projectcss
import sty from "./PlasmicHomepage.module.css"; // plasmic-import: rjC68L8_vvXD/css

import Icon4Icon from "./icons/PlasmicIcon__Icon4"; // plasmic-import: L6R8sd5oTqa/icon
import ChecksvgIcon from "./icons/PlasmicIcon__Checksvg"; // plasmic-import: CGRffNbaaHB/icon
import Icon3Icon from "./icons/PlasmicIcon__Icon3"; // plasmic-import: eUq6eI3Zsph/icon
import EllipsessvgIcon from "./icons/PlasmicIcon__Ellipsessvg"; // plasmic-import: 8pQ2njHnaW/icon
import image2119IybKhpFp4 from "./images/image21.svg"; // plasmic-import: 19IybKHPFp4/picture
import image311As9DxzxSEb from "./images/image31.jpeg"; // plasmic-import: 1AS9DxzxS-eb/picture

export type PlasmicHomepage__VariantMembers = {};

export type PlasmicHomepage__VariantsArgs = {};
type VariantPropType = keyof PlasmicHomepage__VariantsArgs;
export const PlasmicHomepage__VariantProps = new Array<VariantPropType>();

export type PlasmicHomepage__ArgsType = {};
type ArgPropType = keyof PlasmicHomepage__ArgsType;
export const PlasmicHomepage__ArgProps = new Array<ArgPropType>();

export type PlasmicHomepage__OverridesType = {
  root?: p.Flex<"div">;
  homeSelector?: p.Flex<typeof Select>;
  h1?: p.Flex<"h1">;
};

export interface DefaultHomepageProps {
  className?: string;
}

function PlasmicHomepage__RenderFunc(props: {
  variants: PlasmicHomepage__VariantsArgs;
  args: PlasmicHomepage__ArgsType;
  overrides: PlasmicHomepage__OverridesType;

  forNode?: string;
}) {
  const { variants, args, overrides, forNode } = props;

  const globalVariants = ensureGlobalVariants({
    screen: useScreenVariantsaxx2E0C3R4WD()
  });

  return (
    <React.Fragment>
      {}
      {}

      <div className={projectcss.plasmic_page_wrapper}>
        <p.Stack
          as={"div"}
          data-plasmic-name={"root"}
          data-plasmic-override={overrides.root}
          data-plasmic-root={true}
          data-plasmic-for-node={forNode}
          hasGap={true}
          className={classNames(
            projectcss.all,
            projectcss.root_reset,
            projectcss.plasmic_default_styles,
            sty.root,
            "" as const
          )}
        >
          {true ? (
            <p.Stack
              as={"div"}
              hasGap={true}
              className={classNames(projectcss.all, sty.freeBox__exQe)}
            >
              {true ? (
                <p.Stack
                  as={"div"}
                  hasGap={true}
                  className={classNames(projectcss.all, sty.freeBox__uyAso)}
                >
                  <p.PlasmicImg
                    alt={""}
                    className={classNames(sty.img__yjkeR)}
                    displayHeight={"40px" as const}
                    displayMaxHeight={"none" as const}
                    displayMaxWidth={"none" as const}
                    displayMinHeight={"0" as const}
                    displayMinWidth={"0" as const}
                    displayWidth={"40px" as const}
                    src={{
                      src: image2119IybKhpFp4,
                      fullWidth: 150,
                      fullHeight: 150,
                      aspectRatio: 1
                    }}
                  />

                  <p.Stack
                    as={"div"}
                    hasGap={true}
                    className={classNames(projectcss.all, sty.freeBox__osHx)}
                  >
                    <p.Stack
                      as={"a"}
                      hasGap={true}
                      className={classNames(
                        projectcss.all,
                        projectcss.a,
                        sty.link__hOUdK
                      )}
                    >
                      {false ? (
                        <Icon4Icon
                          className={classNames(projectcss.all, sty.svg__vWjqG)}
                          role={"img"}
                        />
                      ) : null}

                      <div
                        className={classNames(
                          projectcss.all,
                          projectcss.__wab_text,
                          sty.text__yphUb
                        )}
                      >
                        {"Services"}
                      </div>

                      {false ? (
                        <Icon4Icon
                          className={classNames(projectcss.all, sty.svg__zgSzQ)}
                          role={"img"}
                        />
                      ) : null}
                    </p.Stack>

                    <p.Stack
                      as={"a"}
                      hasGap={true}
                      className={classNames(
                        projectcss.all,
                        projectcss.a,
                        sty.link__rwd3G
                      )}
                    >
                      {false ? (
                        <Icon4Icon
                          className={classNames(
                            projectcss.all,
                            sty.svg___9P3Xf
                          )}
                          role={"img"}
                        />
                      ) : null}

                      <div
                        className={classNames(
                          projectcss.all,
                          projectcss.__wab_text,
                          sty.text__mp5DV
                        )}
                      >
                        {"Features"}
                      </div>

                      {false ? (
                        <Icon4Icon
                          className={classNames(projectcss.all, sty.svg__mD3B1)}
                          role={"img"}
                        />
                      ) : null}
                    </p.Stack>

                    <p.Stack
                      as={"a"}
                      hasGap={true}
                      className={classNames(
                        projectcss.all,
                        projectcss.a,
                        sty.link__q1USj
                      )}
                    >
                      {false ? (
                        <Icon4Icon
                          className={classNames(
                            projectcss.all,
                            sty.svg___18GpF
                          )}
                          role={"img"}
                        />
                      ) : null}

                      <div
                        className={classNames(
                          projectcss.all,
                          projectcss.__wab_text,
                          sty.text__xG4E8
                        )}
                      >
                        {"Company"}
                      </div>

                      {false ? (
                        <Icon4Icon
                          className={classNames(projectcss.all, sty.svg__qZ9O7)}
                          role={"img"}
                        />
                      ) : null}
                    </p.Stack>

                    <p.Stack
                      as={"a"}
                      hasGap={true}
                      className={classNames(
                        projectcss.all,
                        projectcss.a,
                        sty.link__ohwcy
                      )}
                    >
                      {false ? (
                        <Icon4Icon
                          className={classNames(
                            projectcss.all,
                            sty.svg___9Bl3U
                          )}
                          role={"img"}
                        />
                      ) : null}

                      <div
                        className={classNames(
                          projectcss.all,
                          projectcss.__wab_text,
                          sty.text__dU5Q9
                        )}
                      >
                        {"Contact"}
                      </div>

                      {false ? (
                        <Icon4Icon
                          className={classNames(projectcss.all, sty.svg__fsp30)}
                          role={"img"}
                        />
                      ) : null}
                    </p.Stack>

                    <p.Stack
                      as={"a"}
                      hasGap={true}
                      className={classNames(
                        projectcss.all,
                        projectcss.a,
                        sty.link__y7Zfk
                      )}
                    >
                      {false ? (
                        <Icon4Icon
                          className={classNames(projectcss.all, sty.svg__aNlt)}
                          role={"img"}
                        />
                      ) : null}

                      <div
                        className={classNames(
                          projectcss.all,
                          projectcss.__wab_text,
                          sty.text___8359T
                        )}
                      >
                        {"Log in"}
                      </div>

                      {false ? (
                        <Icon4Icon
                          className={classNames(projectcss.all, sty.svg__xfxlt)}
                          role={"img"}
                        />
                      ) : null}
                    </p.Stack>

                    <p.Stack
                      as={"a"}
                      hasGap={true}
                      className={classNames(
                        projectcss.all,
                        projectcss.a,
                        sty.link__raP0B
                      )}
                    >
                      {false ? (
                        <Icon4Icon
                          className={classNames(
                            projectcss.all,
                            sty.svg___9ZLlW
                          )}
                          role={"img"}
                        />
                      ) : null}

                      <div
                        className={classNames(
                          projectcss.all,
                          projectcss.__wab_text,
                          sty.text__l93Bn
                        )}
                      >
                        {"Sign up"}
                      </div>

                      {false ? (
                        <Icon4Icon
                          className={classNames(projectcss.all, sty.svg__ioThd)}
                          role={"img"}
                        />
                      ) : null}
                    </p.Stack>
                  </p.Stack>

                  {false ? (
                    <div
                      className={classNames(
                        projectcss.all,
                        sty.freeBox___7RzqH
                      )}
                    >
                      <button
                        className={classNames(
                          projectcss.all,
                          projectcss.button,
                          projectcss.__wab_text,
                          sty.button__fdaQo
                        )}
                      >
                        {"Sign up"}
                      </button>

                      <p.Stack
                        as={"a"}
                        hasGap={true}
                        className={classNames(
                          projectcss.all,
                          projectcss.a,
                          sty.link__fQn4J
                        )}
                      >
                        {false ? (
                          <Icon4Icon
                            className={classNames(
                              projectcss.all,
                              sty.svg__d4QnM
                            )}
                            role={"img"}
                          />
                        ) : null}

                        <div
                          className={classNames(
                            projectcss.all,
                            projectcss.__wab_text,
                            sty.text__aG85B
                          )}
                        >
                          {"Log in"}
                        </div>

                        {false ? (
                          <Icon4Icon
                            className={classNames(
                              projectcss.all,
                              sty.svg__r8HmD
                            )}
                            role={"img"}
                          />
                        ) : null}
                      </p.Stack>
                    </div>
                  ) : null}
                </p.Stack>
              ) : null}
            </p.Stack>
          ) : null}
          {true ? (
            <div className={classNames(projectcss.all, sty.columns__vhGnd)}>
              <div className={classNames(projectcss.all, sty.column___28Y0I)}>
                <Select
                  data-plasmic-name={"homeSelector"}
                  data-plasmic-override={overrides.homeSelector}
                  className={classNames("__wab_instance", sty.homeSelector)}
                  placeholder={
                    true ? (
                      <div
                        className={classNames(
                          projectcss.all,
                          projectcss.__wab_text,
                          sty.text__hnzzP
                        )}
                      >
                        {"Homes"}
                      </div>
                    ) : null
                  }
                  selectedContent={
                    <div
                      className={classNames(
                        projectcss.all,
                        projectcss.__wab_text,
                        sty.text___795Vc
                      )}
                    >
                      {"Selected"}
                    </div>
                  }
                >
                  {true ? (
                    <Select__Option
                      className={classNames(
                        "__wab_instance",
                        sty.option__anaTp
                      )}
                      value={"value1" as const}
                    >
                      {"Option 1"}
                    </Select__Option>
                  ) : null}

                  <Select__Option
                    className={classNames("__wab_instance", sty.option__lfYf7)}
                    value={"value2" as const}
                  >
                    {"Option 2"}
                  </Select__Option>
                </Select>
              </div>

              <div className={classNames(projectcss.all, sty.column___6Hvfj)}>
                <Button
                  className={classNames("__wab_instance", sty.button__ypP9X)}
                >
                  {"Add Plant"}
                </Button>
              </div>

              <div className={classNames(projectcss.all, sty.column__yZvrI)}>
                <Button
                  className={classNames("__wab_instance", sty.button__e6E5W)}
                >
                  {"Order by"}
                </Button>
              </div>

              <div className={classNames(projectcss.all, sty.column___9DAKl)}>
                <Button
                  className={classNames("__wab_instance", sty.button__sxGxh)}
                >
                  {"Filter"}
                </Button>
              </div>
            </div>
          ) : null}

          <div className={classNames(projectcss.all, sty.freeBox__l8Ik)}>
            {true ? (
              <p.Stack
                as={"div"}
                hasGap={true}
                className={classNames(projectcss.all, sty.columns__zZvUe)}
              >
                <div className={classNames(projectcss.all, sty.column__q8HQx)}>
                  <p.PlasmicImg
                    alt={""}
                    className={classNames(sty.img___1G0Kl)}
                    displayHeight={
                      hasVariant(globalVariants, "screen", "mobileOnly")
                        ? ("100%" as const)
                        : ("100%" as const)
                    }
                    displayMaxHeight={"none" as const}
                    displayMaxWidth={"100%" as const}
                    displayMinHeight={"0" as const}
                    displayMinWidth={"0" as const}
                    displayWidth={"100%" as const}
                    loading={"lazy" as const}
                    src={{
                      src: image311As9DxzxSEb,
                      fullWidth: 1280,
                      fullHeight: 853,
                      aspectRatio: undefined
                    }}
                  />
                </div>

                <div className={classNames(projectcss.all, sty.column__fwXy8)}>
                  <div
                    className={classNames(projectcss.all, sty.columns__jrEuV)}
                  >
                    <div
                      className={classNames(projectcss.all, sty.column__wYcn)}
                    >
                      <div
                        className={classNames(
                          projectcss.all,
                          projectcss.__wab_text,
                          sty.text__vFp9O
                        )}
                      >
                        {"Plant #1"}
                      </div>
                    </div>

                    {(
                      hasVariant(globalVariants, "screen", "mobileOnly")
                        ? true
                        : true
                    ) ? (
                      <div
                        className={classNames(
                          projectcss.all,
                          sty.column__fssmh
                        )}
                      >
                        {(
                          hasVariant(globalVariants, "screen", "mobileOnly")
                            ? true
                            : true
                        ) ? (
                          <div
                            className={classNames(
                              projectcss.all,
                              projectcss.__wab_text,
                              sty.text___0XgJh
                            )}
                          >
                            {"Every 22 days"}
                          </div>
                        ) : null}
                        {(
                          hasVariant(globalVariants, "screen", "mobileOnly")
                            ? true
                            : true
                        ) ? (
                          <div
                            className={classNames(
                              projectcss.all,
                              projectcss.__wab_text,
                              sty.text__f2T4K
                            )}
                          >
                            {"4 days left"}
                          </div>
                        ) : null}
                      </div>
                    ) : null}
                  </div>
                </div>

                <div className={classNames(projectcss.all, sty.column__jtbHs)}>
                  <WateredButton
                    className={classNames(
                      "__wab_instance",
                      sty.wateredButton__j1LZw
                    )}
                  />
                </div>

                <div className={classNames(projectcss.all, sty.column__fuQOb)}>
                  <EllipsessvgIcon
                    className={classNames(projectcss.all, sty.svg___2Ns0Q)}
                    role={"img"}
                  />
                </div>
              </p.Stack>
            ) : null}
            {true ? (
              <p.Stack
                as={"div"}
                hasGap={true}
                className={classNames(projectcss.all, sty.columns__dckob)}
              >
                <div className={classNames(projectcss.all, sty.column__qaVw)}>
                  <p.PlasmicImg
                    alt={""}
                    className={classNames(sty.img__jxJrV)}
                    displayHeight={
                      hasVariant(globalVariants, "screen", "mobileOnly")
                        ? ("100%" as const)
                        : ("100%" as const)
                    }
                    displayMaxHeight={"none" as const}
                    displayMaxWidth={"100%" as const}
                    displayMinHeight={"0" as const}
                    displayMinWidth={"0" as const}
                    displayWidth={"100%" as const}
                    loading={"lazy" as const}
                    src={{
                      src: image311As9DxzxSEb,
                      fullWidth: 1280,
                      fullHeight: 853,
                      aspectRatio: undefined
                    }}
                  />
                </div>

                <div className={classNames(projectcss.all, sty.column__nwJdi)}>
                  <div
                    className={classNames(projectcss.all, sty.columns__qlXyf)}
                  >
                    <div
                      className={classNames(projectcss.all, sty.column__fUPb)}
                    >
                      <div
                        className={classNames(
                          projectcss.all,
                          projectcss.__wab_text,
                          sty.text__mq2YA
                        )}
                      >
                        {"Plant #1"}
                      </div>
                    </div>

                    {(
                      hasVariant(globalVariants, "screen", "mobileOnly")
                        ? true
                        : true
                    ) ? (
                      <div
                        className={classNames(
                          projectcss.all,
                          sty.column__nlcVt
                        )}
                      >
                        {(
                          hasVariant(globalVariants, "screen", "mobileOnly")
                            ? true
                            : true
                        ) ? (
                          <div
                            className={classNames(
                              projectcss.all,
                              projectcss.__wab_text,
                              sty.text__jmbvb
                            )}
                          >
                            {"Every 22 days"}
                          </div>
                        ) : null}
                        {(
                          hasVariant(globalVariants, "screen", "mobileOnly")
                            ? true
                            : true
                        ) ? (
                          <div
                            className={classNames(
                              projectcss.all,
                              projectcss.__wab_text,
                              sty.text__piEnZ
                            )}
                          >
                            {"4 days left"}
                          </div>
                        ) : null}
                      </div>
                    ) : null}
                  </div>
                </div>

                <div className={classNames(projectcss.all, sty.column__p5P5F)}>
                  <WateredButton
                    className={classNames(
                      "__wab_instance",
                      sty.wateredButton__nTtW
                    )}
                  />
                </div>

                <div className={classNames(projectcss.all, sty.column__w1HW)}>
                  <EllipsessvgIcon
                    className={classNames(projectcss.all, sty.svg___9HtZo)}
                    role={"img"}
                  />
                </div>
              </p.Stack>
            ) : null}
            {true ? (
              <p.Stack
                as={"div"}
                hasGap={true}
                className={classNames(projectcss.all, sty.columns__yJQpE)}
              >
                <div className={classNames(projectcss.all, sty.column___0E8Le)}>
                  <p.PlasmicImg
                    alt={""}
                    className={classNames(sty.img__oOEyW)}
                    displayHeight={
                      hasVariant(globalVariants, "screen", "mobileOnly")
                        ? ("100%" as const)
                        : ("100%" as const)
                    }
                    displayMaxHeight={"none" as const}
                    displayMaxWidth={"100%" as const}
                    displayMinHeight={"0" as const}
                    displayMinWidth={"0" as const}
                    displayWidth={"100%" as const}
                    loading={"lazy" as const}
                    src={{
                      src: image311As9DxzxSEb,
                      fullWidth: 1280,
                      fullHeight: 853,
                      aspectRatio: undefined
                    }}
                  />
                </div>

                <div className={classNames(projectcss.all, sty.column__zddaP)}>
                  <div
                    className={classNames(projectcss.all, sty.columns___3Gmo8)}
                  >
                    <div
                      className={classNames(projectcss.all, sty.column__quwQv)}
                    >
                      <div
                        className={classNames(
                          projectcss.all,
                          projectcss.__wab_text,
                          sty.text__ly00O
                        )}
                      >
                        {"Plant #1"}
                      </div>
                    </div>

                    {(
                      hasVariant(globalVariants, "screen", "mobileOnly")
                        ? true
                        : true
                    ) ? (
                      <div
                        className={classNames(
                          projectcss.all,
                          sty.column__xAaIs
                        )}
                      >
                        {(
                          hasVariant(globalVariants, "screen", "mobileOnly")
                            ? true
                            : true
                        ) ? (
                          <div
                            className={classNames(
                              projectcss.all,
                              projectcss.__wab_text,
                              sty.text__xDulx
                            )}
                          >
                            {"Every 22 days"}
                          </div>
                        ) : null}
                        {(
                          hasVariant(globalVariants, "screen", "mobileOnly")
                            ? true
                            : true
                        ) ? (
                          <div
                            className={classNames(
                              projectcss.all,
                              projectcss.__wab_text,
                              sty.text__c8UtX
                            )}
                          >
                            {"4 days left"}
                          </div>
                        ) : null}
                      </div>
                    ) : null}
                  </div>
                </div>

                <div className={classNames(projectcss.all, sty.column__kbbt6)}>
                  <WateredButton
                    className={classNames(
                      "__wab_instance",
                      sty.wateredButton___4T7J8
                    )}
                  />
                </div>

                <div className={classNames(projectcss.all, sty.column__x9Y3C)}>
                  <EllipsessvgIcon
                    className={classNames(projectcss.all, sty.svg__oMiXy)}
                    role={"img"}
                  />
                </div>
              </p.Stack>
            ) : null}
          </div>

          {true ? (
            <h1
              data-plasmic-name={"h1"}
              data-plasmic-override={overrides.h1}
              className={classNames(
                projectcss.all,
                projectcss.h1,
                projectcss.__wab_text,
                sty.h1
              )}
            >
              {"Welcome to your first pages."}
            </h1>
          ) : null}
          {true ? (
            <div
              className={classNames(
                projectcss.all,
                projectcss.__wab_text,
                sty.text__tpLc2
              )}
            >
              <React.Fragment>
                <React.Fragment>
                  {
                    "If you haven't already done so, go back and learn the basics by going through the Plasmic Levels tutorial.\n\nIt's always easier to start from examples! Add a new page using a template—do this from the list of pages in the top left (the gray + button).\n\nOr press the big blue + button to start dragging items into this page.\n\nIntegrate this project into your codebase—press the "
                  }
                </React.Fragment>
                <span
                  className={"plasmic_default__all plasmic_default__span"}
                  style={{ fontWeight: 700 }}
                >
                  {"Code"}
                </span>
                <React.Fragment>
                  {
                    " button in the top right and follow the quickstart instructions.\n\nJoin our Slack community (icon in bottom left) for help any time."
                  }
                </React.Fragment>
              </React.Fragment>
            </div>
          ) : null}
          {true ? (
            <div
              className={classNames(
                projectcss.all,
                projectcss.__wab_text,
                sty.text__nqEi
              )}
            >
              <React.Fragment>
                <React.Fragment>
                  {
                    "If you haven't already done so, go back and learn the basics by going through the Plasmic Levels tutorial.\n\nIt's always easier to start from examples! Add a new page using a template—do this from the list of pages in the top left (the gray + button).\n\nOr press the big blue + button to start dragging items into this page.\n\nIntegrate this project into your codebase—press the "
                  }
                </React.Fragment>
                <span
                  className={"plasmic_default__all plasmic_default__span"}
                  style={{ fontWeight: 700 }}
                >
                  {"Code"}
                </span>
                <React.Fragment>
                  {
                    " button in the top right and follow the quickstart instructions.\n\nJoin our Slack community (icon in bottom left) for help any time."
                  }
                </React.Fragment>
              </React.Fragment>
            </div>
          ) : null}
        </p.Stack>
      </div>
    </React.Fragment>
  ) as React.ReactElement | null;
}

const PlasmicDescendants = {
  root: ["root", "homeSelector", "h1"],
  homeSelector: ["homeSelector"],
  h1: ["h1"]
} as const;
type NodeNameType = keyof typeof PlasmicDescendants;
type DescendantsType<T extends NodeNameType> =
  typeof PlasmicDescendants[T][number];
type NodeDefaultElementType = {
  root: "div";
  homeSelector: typeof Select;
  h1: "h1";
};

type ReservedPropsType = "variants" | "args" | "overrides";
type NodeOverridesType<T extends NodeNameType> = Pick<
  PlasmicHomepage__OverridesType,
  DescendantsType<T>
>;
type NodeComponentProps<T extends NodeNameType> =
  // Explicitly specify variants, args, and overrides as objects
  {
    variants?: PlasmicHomepage__VariantsArgs;
    args?: PlasmicHomepage__ArgsType;
    overrides?: NodeOverridesType<T>;
  } & Omit<PlasmicHomepage__VariantsArgs, ReservedPropsType> & // Specify variants directly as props
    // Specify args directly as props
    Omit<PlasmicHomepage__ArgsType, ReservedPropsType> &
    // Specify overrides for each element directly as props
    Omit<
      NodeOverridesType<T>,
      ReservedPropsType | VariantPropType | ArgPropType
    > &
    // Specify props for the root element
    Omit<
      Partial<React.ComponentProps<NodeDefaultElementType[T]>>,
      ReservedPropsType | VariantPropType | ArgPropType | DescendantsType<T>
    >;

function makeNodeComponent<NodeName extends NodeNameType>(nodeName: NodeName) {
  type PropsType = NodeComponentProps<NodeName> & { key?: React.Key };
  const func = function <T extends PropsType>(
    props: T & StrictProps<T, PropsType>
  ) {
    const { variants, args, overrides } = deriveRenderOpts(props, {
      name: nodeName,
      descendantNames: [...PlasmicDescendants[nodeName]],
      internalArgPropNames: PlasmicHomepage__ArgProps,
      internalVariantPropNames: PlasmicHomepage__VariantProps
    });

    return PlasmicHomepage__RenderFunc({
      variants,
      args,
      overrides,
      forNode: nodeName
    });
  };
  if (nodeName === "root") {
    func.displayName = "PlasmicHomepage";
  } else {
    func.displayName = `PlasmicHomepage.${nodeName}`;
  }
  return func;
}

export const PlasmicHomepage = Object.assign(
  // Top-level PlasmicHomepage renders the root element
  makeNodeComponent("root"),
  {
    // Helper components rendering sub-elements
    homeSelector: makeNodeComponent("homeSelector"),
    h1: makeNodeComponent("h1"),

    // Metadata about props expected for PlasmicHomepage
    internalVariantProps: PlasmicHomepage__VariantProps,
    internalArgProps: PlasmicHomepage__ArgProps
  }
);

export default PlasmicHomepage;
/* prettier-ignore-end */
